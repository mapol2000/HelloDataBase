# adb
android debug bridge
안드로이드 장치와 통신하여 디버깅 등의 작업을 진행할 수 있는 다목적 CLI 툴
주로 어플리케이션 설치 및 삭제와 장치 정보 추출, 로그 확인, 시스템 앱 비활성화 등
다양한 용도로 사용하는 프로그램

adb 다운로드
안드로이드 스튜디오 설치시 자동으로 설치됨
안드로이드 스튜디오 설치하지 않는 경우 구글 공식사이트에서 설치가능
https://dl.google.com/android/repository/platform-tools-latest-darwin.zip

adb 관련 파일 위치
/Users/사용자명/Library/Android/sdk
cd platform-tools
./adb

adb 연결확인
./adb devices
=> List of devices attached
   emulator-5554	device

adb root 권한 부여
./adb root
=> restarting adbd as root

장치 쉘에 접속
./adb shell
=> generic_x86_arm:/ #

앱 패키지 디렉토리로 이동 - cd
cd /data/data/패키지명.hellodatabase
ls
=> cache code_cache

sqlite 작업용 디렉토리 생성
mkdir database
cd database


# sqlite
내장형 embeded 데이터베이스 관리 프로그램
클라이언트/서버 구조로 작동하는 시스템이 아닌 응용프로그램에 포함시켜 사용하는
비교적 가벼운 데이터베이스 시스템
단인파일로 구성되어 사용하기가 편함
표준 SQL 문법을 90% 정도 지원함
반면, 데이터 양이 커지면 성능 저하문제 발생

-----------------------------
macOS용 sqlite 사용

sqlite.org
sqlite-tools-osx-x86-3340100.zip을 다운로드해서
java_home에 압축해제함

다른 터미널 실행후
cd /JAVA_HOME/sqlite3

데이터베이스 생성
sqlite3 mapol2000.db

이후 아래와 동일
------------------------------

데이터베이스 생성
sqlite3 아이디.db
=> SQLite version 3.28.0 2020-05-06 18:46:38
   Enter ".help" for usage hints.
   sqlite>

sqlite 환경설정
.header on
.mode column읽


member 테이블 생성
create table member (userid varchar(16), passwd varchar(16));

생성한 테이블 확인
.table

데이터 생성
insert into member values ('abc123', '987xyz');
insert into member values ('987xyz', '123abc');

테이블 조회
select * from member;

테이블 구조 확인
.schema 테이블명
pragma table_info(테이블명);


# sqlite 데이터 형식
NULL, INTEGER, REAL, TEXT, BLOB, NUMERIC

# sqlite 프로그래밍
안드로이드에서 적용할 수 있는 sqlite 프로그래밍 방식은 크게 3가지
1. SQLiteDatabase 클래스 사용
openOrCreateDatabase()  : 생성하거나 이미 존재하는 데이터베이스 객체를 가져옴
execSQL()               : insert, update, delete 질의문을 실행
rawQuery()              : select 질의문 실행

2. SQLite Helper 클래스 사용
SQLiteDatabase 클래스를 사용하는 경우 기존 테이블의 스키마나 구조가 변경되면
유지보수의 범위가 넓어져서 비효율적임 - Helper 클래스를 사용할 것을 추천

onCreate()  : 데이터베이스 생성시
onOpen()    : 생성한 데이터베이스를 열었을때
onUpgrade() : 데이터베이스를 수정했을때


3. Room 라이브러리 클래스 사용
안드로이드용 ORM 데이터 아키텍처 라이브러리
데이터베이스 객체를 자바 또는 코틀린 객체로 매핑해주는 라이브러리
SQLite를 완벽하게 지원하면서 데이터베이스 접근을 강력하게 지원하는 추상화 라이브러리
사용하기 편리하다는 장점으로 인해 구글에서 사용을 적극 추천함

# Room 3가지 주요 구성요소
database    : entity와 dao를 연계해서 crud 작업을 지원하는 추상 클래스
              RoomDatabase를 상속받아 작성

entity      : 데이터베이스의 테이블을 객체화할 청사진 클래스
dao         : 데이터베이스에 접근시 필요한 메서드를 정의한 클래스
              SQL관련 코드 없이 CRUD 작업을 할 수 있도록 관련 코드는 자동 생성됨

# Room 라이브러리를 사용하기 위한 준비작업
build.gradle (app) 파일에 다음내용 추가

plugins 속성:
id 'kotlin-kapt'

dependencies 속성:
def room_version = "2.2.6"
implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

#entity 정의하기
entity는 데이터베이스 컬럼명과 1:1 대응되는 자바/코틀린 객체를 의미함

@Entity     : 자바/코틀린 객체 정의, table_name속성으로 1:1 대응할 테이블명 지정
@PrimaryKey : 테이블의 기본키로 지정된 컬럼과 동일한 멤버변수 정의시 사용
@ColumnInfo : 테이블의 컬럼명과 멤버 변수를 다르게 지정할때 사용
             @ColumnInfo(name="name") val bkname: String
             테이블컬럼명                 멤버변수명

# dao 정의하기
dao는 데이터베이스에 접근해서 CRUD 관련 작업을 실행하는 코드를 인터페이스/추상클래스로 정의

@Insert, @Update, @Delete와 @Query등을 이용해서 관련 코드를 작성해 둠

# database 정의하기

# 쓰레드와 프로세스
프로세스: 시작에서 종료까지 순차적으로 실행하는 방식의 프로그램, 단일 프로그램
        즉, 하나의 코드 실행 흐름으로 처리하는 방식에 주로 사용

쓰레드 thread: 프로세스 내에서 실행되는 각각의 독립적인 실행 흐름
            하나의 프로세스내에서 여러개의 쓰레드가 동작하도록 프로그래밍 하는 것을 멀티쓰레드라 함

# 쓰레드 작성방법
1. Thread 클래스를 상속함
2. run 메서드를 오버라이드함
3. 클래스의 객체를 start()로 호출함